{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"current-analysis\"\n};\nvar _hoisted_2 = {\n  key: 0\n};\nvar _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Analisis de estado actual\", -1 /* HOISTED */)), _ctx.cryptos.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Criptomoneda\"), _createElementVNode(\"th\", null, \"Cantidad\"), _createElementVNode(\"th\", null, \"Dinero\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.cryptos, function (crypto) {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: crypto.code\n    }, [_createElementVNode(\"td\", null, _toDisplayString(crypto.code), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(crypto.amount.toFixed(2)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString((crypto.amount * crypto.price).toFixed(2).replace('.', ',')), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"tfoot\", null, [_createElementVNode(\"tr\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"td\", null, [_createElementVNode(\"strong\", null, \"Total\")], -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"td\", null, null, -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"strong\", null, \"$\" + _toDisplayString(_ctx.totalValue.toFixed(2).replace('.', ',')), 1 /* TEXT */)])])])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"No tienes criptomonedas\"))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_ctx","cryptos","length","_hoisted_2","_Fragment","_renderList","crypto","code","_toDisplayString","amount","toFixed","price","replace","totalValue","_hoisted_3"],"sources":["C:\\Users\\Usuario\\Documents\\tp_final\\src\\views\\CurrentStatus.vue"],"sourcesContent":["<template>\n    <div class=\"current-analysis\">\n        <h1>Analisis de estado actual</h1>\n        <table v-if=\"cryptos.length > 0\">\n        <thead>\n        <tr>\n            <th>Criptomoneda</th>\n            <th>Cantidad</th>\n            <th>Dinero</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"crypto in cryptos\" :key=\"crypto.code\">\n        <td>{{ crypto.code }}</td>\n        <td>{{ crypto.amount.toFixed(2) }}</td>\n        <td>{{ (crypto.amount * crypto.price).toFixed(2).replace('.', ',') }}</td>\n        </tr>\n        </tbody>\n        <tfoot>\n        <tr>\n        <td><strong>Total</strong></td>\n        <td></td>\n        <td><strong>${{ totalValue.toFixed(2).replace('.', ',') }}</strong></td>\n        </tr>\n        </tfoot>\n        </table>\n        <p v-else>No tienes criptomonedas</p>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      transactions: [],\n      cryptos: [],\n      totalValue: 0,\n      headers: {\n        'x-apikey': '60eb09146661365596af552f'\n      },\n      cryptoPrices: {\n\n      }\n    }\n  },\n  async mounted() {\n    const userId = localStorage.getItem('userId')\n    if (userId) {\n        await this.fetchTransactions(userId)\n        await this.calculateCryptoValues()\n    }\n  },\n  methods: {\n    async fetchTransactions(userId) {\n     try {\n      const response = await axios.get(`https://laboratorio3-f36a.restdb.io/rest/transactions?q={\"user_id\": \"${userId}\"}`, { headers: this.headers })\n      this.transactions = response.data\n     } catch (error) {\n      console.error('error')\n     }\n    }\n  }\n  async calculateCryptoValues(){\n    const cryptoMap = {};\n\n    this.transactions.forEach(transaction => {\n      const cryptoCode = transaction.crypto_code\n      const cryptoAmount = parseFloat(transaction.crypto_amount)\n      const transactionValue = parseFloat(transaction.money)\n\n      if(!cryptoMap[cryptoCode]){\n        cryptoMap[cryptoCode] = {amount: 0, value: 0}\n      }\n      \n      if(transaction.action === 'purchase'){\n        cryptoMap[cryptoCode].amount += cryptoAmount;\n        cryptoMap[cryptoCode].value += transactionValue;\n      } else if (transaction.action === 'sale') {\n        cryptoMap[cryptoCode].amount -= cryptoAmount;\n        cryptoMap[cryptoCode].value -= transactionValue;\n      }\n    })\n\n    for (const [cryptoCode, data] of Object.entries(cryptoMap)) {\n      if (data.amount > 0) {\n        this.cryptos.push({\n          name: this.getCryptoName(cryptoCode),\n          amount: data.amount,\n          value: data.value\n        })\n      }\n    }\n    await.this.fetchCryptoPrices();\n  },\n\n  getCryptoName(cryptoCode) {\n    const cryptoNames = {\n      btc: 'Bitcoin',\n      eth: 'Ethereum',\n      usdt: 'Tether',\n      usdc: 'USD Coin',\n      sol: 'Solana'\n    }\n    return cryptoNames[cryptoCode] || cryptoCode\n  },\n\n  async fetchCryptoPrices() {\n    try {\n      for (const crypto of this.cryptos){\n        const response = await axios.get(`https://criptoya.com/api/satoshitango/${crypto.code.toLowerCase()}/ars/`)\n        crypto.price = response.data.bid\n      }\n\n      this.totalValue = this.cryptos.reduce((acc, crypto) => {\n        return acc + (crypto.amount * crypto.price)\n      }, 0)\n    } catch (error) {\n      console.error('Error al obtener los precios)\n    }\n  }\n}\n</script>\n\n<style>\n  .curren-analysis{\n    padding: 20px;\n  }\n  \n  .sale {\n    padding: 20px;\n  }\n\n  .form-container{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n  }\n\n  h1{\n    color: #333;\n    font-size: 30px;\n    margin-bottom: 50px;\n  }\n\n  input, select{\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #333;\n    border-radius: 5px;\n    font-size: 18px;\n    margin-right: 10px;\n  }\n\n  .form-group{\n    margin-bottom: 20px;\n  }\n\n  button{\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    transition: background-color 0.5s;\n    font-size: 16px;\n  }\n  .btn{\n    display: inline-block;\n    margin-top: 20px;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n    margin-right: 5px;\n    margin-left: 5px;\n  }\n</style>\n"],"mappings":";;EACS,SAAM;AAAkB;;EADjCA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CA0BM,OA1BNC,UA0BM,G,0BAzBFC,mBAAA,CAAkC,YAA9B,2BAAyB,sBAChBC,IAAA,CAAAC,OAAO,CAACC,MAAM,Q,cAA3BL,mBAAA,CAsBQ,SAzBhBM,UAAA,G,0BAIQJ,mBAAA,CAMQ,gBALRA,mBAAA,CAIK,aAHDA,mBAAA,CAAqB,YAAjB,cAAY,GAChBA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAe,YAAX,QAAM,E,wBAGdA,mBAAA,CAMQ,iB,kBALRF,mBAAA,CAIKO,SAAA,QAhBbC,WAAA,CAY6BL,IAAA,CAAAC,OAAO,EAZpC,UAYmBK,MAAM;yBAAjBT,mBAAA,CAIK;MAJ0BD,GAAG,EAAEU,MAAM,CAACC;QAC3CR,mBAAA,CAA0B,YAAAS,gBAAA,CAAnBF,MAAM,CAACC,IAAI,kBAClBR,mBAAA,CAAuC,YAAAS,gBAAA,CAAhCF,MAAM,CAACG,MAAM,CAACC,OAAO,qBAC5BX,mBAAA,CAA0E,YAAAS,gBAAA,EAAlEF,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACK,KAAK,EAAED,OAAO,IAAIE,OAAO,2B;oCAGxDb,mBAAA,CAMQ,gBALRA,mBAAA,CAIK,a,0BAHLA,mBAAA,CAA+B,aAA3BA,mBAAA,CAAsB,gBAAd,OAAK,E,gDACjBA,mBAAA,CAAS,sCACTA,mBAAA,CAAwE,aAApEA,mBAAA,CAA+D,gBAAvD,GAAC,GAAAS,gBAAA,CAAGR,IAAA,CAAAa,UAAU,CAACH,OAAO,IAAIE,OAAO,2B,0BAI7Cf,mBAAA,CAAqC,KA1B7CiB,UAAA,EA0BkB,yBAAuB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}